/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(EG2)package parser;import java.io.FileInputStream;import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.io.IOException;import util.*;public class EG2/*@bgen(jjtree)*/implements EG2TreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTEG2State jjtree = new JJTEG2State();

/*@egen*/  static QTList qtList = new QTList();  static ArgList argList = new ArgList();  static public ErrorList errorList = new ErrorList();
  static public String filePath = null;
  //static public EG2 parser = null;
  public static void run(EG2 parser)  {    //\u8f93\u51fa\u5355\u8bcd\u5e8f\u5217    try    {      Token token;      token = token_source.getNextToken();
      FileOutputStream out = new FileOutputStream("Lexical.txt");
      PrintStream p = new PrintStream(out);
      int innerId = 0;      while (token.image != "")      {
		innerId++;
        p.println(innerId + ":\t(" + token.image + ",\t" + token.kind + "\t)\n");
                //System.out.println("<" + token.image + ",\t" + token.kind + ">");        token = token_source.getNextToken();      }    }    catch (Exception e)    {      //System.out.println("Oops.");      //System.out.println(e.getMessage());
      errorList.addError(e.getMessage());    }
        //\u8f93\u5165\u6d41\u91cd\u7f6e
    FileInputStream fileInput = null;
    try    {      fileInput = new FileInputStream(filePath);    }    catch (FileNotFoundException e1)    {      // TODO Auto-generated catch block
      //e1.printStackTrace();
      String errorInfo = "Error: File can not found.";      errorList.addError(errorInfo);    }    parser.ReInit(fileInput);
        //\u8f93\u51fa\u8bed\u6cd5\u6811    try    {      SimpleNode n = EG2.Start();
      n.Init();      n.dump("",n.p);    }    catch (Exception e)    {      //System.out.println("Oops.");      //System.out.println(e.getMessage());
      errorList.addError(e.getMessage());    }
        //\u8f93\u51fa\u56db\u5143\u5f0f
    qtList.Init();    qtList.printQTTable();
    qtList.clear();
    //\u8f93\u51fa\u7b26\u53f7\u8868
    argList.Init();
    argList.printArgTable();
	argList.clear();
        //\u8f93\u51fa\u9519\u8bef\u5217\u8868
    errorList.Init();
    errorList.printError();
    errorList.clear();  }}PARSER_END(EG2)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])? >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >| < FLOAT_LITERAL :    (< INTEGER_LITERAL >)+    (      "." (< INTEGER_LITERAL >)+    )? >}TOKEN : /* KEYWORDS */{  < MAIN : "main" >| < VOID : "void" >| < INT : "int" >| < FLOAT : "float" >| < DOUBLE : "double" >| < IF : "if" >| < ELSE : "else" >| < DO : "do" >| < FOR : "for" >| < WHILE : "while" >| < SWITCH : "switch" >| < CASE : "case" >| < BREAK : "break" >| < DEFAULT1 : "default" >| < RETURN : "return" >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}TOKEN : /* OPERATOR */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < MOD : "%" >| < EQUAL : "=" >}TOKEN : /* RELATION */{  < RELATION :    "<"  | "<="  | ">"  | ">="  | "=="  | "!=" >}TOKEN : /* LOGICAL */{  < AND : "&&" >| < OR : "||" >}TOKEN : /* SEPARATER */{  < SEMICOLON : ";" >| < COMMA : "," >| < LEFTBRACES : "{" >| < RIGHTBRACES : "}" >| < LEFTBRACKETS : "[" >| < RIGHTBRACKETS : "]" >| < LEFTPARENTHESES : "(" >| < RIGHTPARENTHESES : ")" >}SimpleNode Start() :{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  Program() < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Program() :{/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Program */
  try {
/*@egen*/  (    < INT >  | < VOID >  )  < MAIN > "(" ")" "{"  (    StatementBlock()  )*  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StatementBlock() :{/*@bgen(jjtree) StatementBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StatementBlock */
  try {
/*@egen*/  Statement()| "{"  (    StatementBlock()  )*  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Statement() :{/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Statement */
  try {
/*@egen*/  SeqStatement()| ConStatement()| WhileStatement()| ForStatement()| DoWhileStatement()| SwitchCaseStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SeqStatement() :{/*@bgen(jjtree) SeqStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SeqStatement */
  try {
/*@egen*/  [    DeclareStatement()  | AssignStatement()  ]  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DeclareStatement() :{/*@bgen(jjtree) DeclareStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  Token id;  ArgInfo arg;}{/*@bgen(jjtree) DeclareStatement */
  try {
/*@egen*/  (    t = < INT >  | t = < FLOAT >  | t = < DOUBLE >  )  id = < IDENTIFIER >  {    arg = new ArgInfo(t.image, id);    if (argList.checkRepeat(arg))    {      String errorInfo = "";      errorInfo += "Variable \"";      errorInfo += t.image;      errorInfo += " ";      errorInfo += id.image;      errorInfo += "\" declaration repeat at line ";      errorInfo += id.endLine;      errorInfo += ", column ";      errorInfo += id.endColumn;      errorInfo += ".";      errorList.addError(errorInfo);    }    else    {      argList.addArgInfo(arg);    }  }  (    "," id = < IDENTIFIER >    {      arg = new ArgInfo(t.image, id);      if (argList.checkRepeat(arg))      {        String errorInfo = "";        errorInfo += "Variable \"";        errorInfo += t.image;        errorInfo += " ";        errorInfo += id.image;        errorInfo += "\" declaration repeat at line ";        errorInfo += id.endLine;        errorInfo += ", column ";        errorInfo += id.endColumn;        errorInfo += ".";        errorList.addError(errorInfo);        errorList.addError(errorInfo);      }      else      {        argList.addArgInfo(arg);      }    }  )*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AssignStatement() :{/*@bgen(jjtree) AssignStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token id;  Token a;  String e;}{/*@bgen(jjtree) AssignStatement */
  try {
/*@egen*/  id = < IDENTIFIER > a = < EQUAL > e = Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (argList.checkUndefined(id.image))    {      String errorInfo = "";      errorInfo += "Variable \"";      errorInfo += id.image;      errorInfo += "\" are not declared at line ";      errorInfo += id.endLine;      errorInfo += ", column ";      errorInfo += id.endColumn;      errorInfo += ".";      errorList.addError(errorInfo);    }    else    {      QTInfo qt = new QTInfo(a.image, e, "_", id.image);      qtList.addQTInfo(qt);    }  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ConStatement() :{/*@bgen(jjtree) ConStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ConditionValue chain = null;  QTInfo info = null;}{/*@bgen(jjtree) ConStatement */
  try {
/*@egen*/  < IF > "(" chain = Logical()  {    chain.backpatchTrueChain(QTInfo.size + 1);  }  ")" StatementBlock()  (    LOOKAHEAD(1)    < ELSE >    {      info = new QTInfo("J", "_", "_", "WAIT");      qtList.addQTInfo(info);      chain.backpatchFalseChain(QTInfo.size + 1);    }    StatementBlock()  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (info != null) info.setResult(QTInfo.size + 1);    else chain.backpatchFalseChain(QTInfo.size + 1);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void WhileStatement() :{/*@bgen(jjtree) WhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ConditionValue chain = null;  int quad;}{/*@bgen(jjtree) WhileStatement */
  try {
/*@egen*/  < WHILE > "("  {    quad = QTInfo.size + 1;  }  chain = Logical()  {    chain.backpatchTrueChain(QTInfo.size + 1);  }  ")" StatementBlock()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    qtList.addQTInfo(new QTInfo("J", "_", "_", quad));    chain.backpatchFalseChain(QTInfo.size + 1);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ForStatement() :{/*@bgen(jjtree) ForStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ConditionValue chain = null;  int quad1;  int quad2;}{/*@bgen(jjtree) ForStatement */
  try {
/*@egen*/  < FOR > "(" AssignStatement() ";"  {    quad1 = QTInfo.size + 1;  }  chain = Logical()  {    quad2 = QTInfo.size + 1;  }  ";" AssignStatement()  {    qtList.addQTInfo(new QTInfo("J", "_", "_", quad1));    chain.backpatchTrueChain(QTInfo.size + 1);  }  ")" StatementBlock()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    qtList.addQTInfo(new QTInfo("J", "_", "_", quad2));    chain.backpatchFalseChain(QTInfo.size + 1);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DoWhileStatement() :{/*@bgen(jjtree) DoWhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ConditionValue chain = null;  int quad;}{/*@bgen(jjtree) DoWhileStatement */
  try {
/*@egen*/  < DO >  {    quad = QTInfo.size + 1;  }  StatementBlock() < WHILE > "(" chain = Logical()  {    chain.backpatchTrueChain(quad);    chain.backpatchFalseChain(QTInfo.size + 1);  }  ")" ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SwitchCaseStatement() :{/*@bgen(jjtree) SwitchCaseStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHCASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String idStr;  String caseStr;  Token t = null;  Token bk = null;  Token mode = null;  QTInfo info = null;  QTInfo continueInfo = null;  ConditionValue breakChain = new ConditionValue();  int defaultQuad = 0;  boolean hasDefault = false;}{/*@bgen(jjtree) SwitchCaseStatement */
  try {
/*@egen*/  < SWITCH > "(" idStr = Expression()  ")" "{"  (    (      mode = < CASE > t = < INTEGER_LITERAL >    | mode = < DEFAULT1 >    )    {      if (info != null) info.setResult(QTInfo.size + 1);      if (mode.image == "case")      {        if (continueInfo != null)        {          continueInfo.setResult(QTInfo.size + 3);          continueInfo = null;        }        caseStr = t.image;        qtList.addQTInfo(new QTInfo("J==", idStr, caseStr, QTInfo.size + 3));        info = new QTInfo("J", "_", "_", "WAIT");        qtList.addQTInfo(info);      }      else if (mode.image == "default")      {        if (hasDefault)        {          //error:
          String errorInfo = "";          errorInfo += "Multiple default labels in one switch at line ";          errorInfo += mode.endLine;          errorInfo += ", column ";          errorInfo += mode.endColumn;          errorInfo += ".";          errorList.addError(errorInfo);          return;        }        if (continueInfo != null)        {          continueInfo.setResult(QTInfo.size + 2);          continueInfo = null;        }        hasDefault = true;        //\u8bb0\u5f55default\u7684\u4f4d\u7f6e\uff0c\u6700\u540e\u4e00\u4e2acase\u8df3\u8f6c
        defaultQuad = QTInfo.size + 2;        info = new QTInfo("J", "_", "_", "WAIT");        qtList.addQTInfo(info);      }    }    ":"    (      StatementBlock()    )*    (      bk = < BREAK > ";"      {        QTInfo breakInfo = new QTInfo("J", "_", "_", "BREAK");        qtList.addQTInfo(breakInfo);        breakChain.mergeTrue(breakInfo);      }    )?    {      if (bk == null)      {        //\u8bed\u53e5\u672b\u5c3e\u6ca1\u6709break\u5219\u8df3\u8fc7case\u5224\u65ad\u7684\u4e24\u4e2a\u56db\u5143\u5f0f\u6216default\u8df3\u8f6c\u7684\u4e00\u4e2a\u56db\u5143\u5f0f
        continueInfo = new QTInfo("J", "_", "_", "CON");        qtList.addQTInfo(continueInfo);      }      bk = null;    }  )*  "}"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (mode.image == "case" && !hasDefault) info.setResult(QTInfo.size);    else if (mode.image == "case" && hasDefault) info.setResult(defaultQuad);    else if (mode.image == "default")    {      //\u82e5default\u6700\u540e\u51fa\u73b0\uff0c\u5219\u79fb\u9664default\u5904\u8df3\u8f6c\u56db\u5143\u5f0f\u5e76\u5c06\u4e4b\u540e\u7684\u5e8f\u53f7\u524d\u79fb      qtList.remove(defaultQuad - 1);      qtList.changeIndex(defaultQuad, 1);      QTInfo.size--;    }    breakChain.backpatchTrueChain(QTInfo.size);    //\u79fb\u9664\u6700\u540e\u4e00\u4e2abreak\u6216continueInfo\u7684\u8df3\u8f6c\u56db\u5143\u5f0f    qtList.remove(QTInfo.size);    QTInfo.size--;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}ConditionValue Logical() :{/*@bgen(jjtree) Logical */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ConditionValue chain1 = new ConditionValue();  ConditionValue chain2 = new ConditionValue();  Token log = null;}{/*@bgen(jjtree) Logical */
  try {
/*@egen*/  chain1 = Condition()  (    (      log = < AND >      {        chain1.backpatchTrueChain(QTInfo.size + 1);      }    | log = < OR >      {        chain1.backpatchFalseChain(QTInfo.size + 1);      }    )    chain2 = Logical()    {      if (log.image == "&&")      {        chain2.mergeFalse(chain1);      }      else if (log.image == "||")      {        chain2.mergeTrue(chain1);      }      return chain2;    }  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return chain1;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}ConditionValue Condition() :{/*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String e1;  String e2 = null;  String rop = null;  ConditionValue chain = new ConditionValue();}{/*@bgen(jjtree) Condition */
  try {
/*@egen*/  e1 = Expression()  (    rop = Relation() e2 = Expression()  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (rop != null)    {      QTInfo info = new QTInfo("J" + rop, e1, e2, "T");      qtList.addQTInfo(info);      chain.mergeTrue(info);    }    else    {      QTInfo info = new QTInfo("Jnz", e1, "_", "T");      qtList.addQTInfo(info);      chain.mergeTrue(info);    }    QTInfo info = new QTInfo("J", "_", "_", "F");    qtList.addQTInfo(info);    chain.mergeFalse(info);    return chain;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String Expression() :{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String str;}{/*@bgen(jjtree) Expression */
  try {
/*@egen*/  str = AdditiveExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return str;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String AdditiveExpression() :{/*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String first;  String middle;  String newTemp;  Token op = null;}{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/  first = MultiplicativeExpression()  {    newTemp = first;  }  (    (      op = < PLUS >    | op = < MINUS >    )    middle = MultiplicativeExpression()    {      newTemp = VariableNameGenerator.genVariableName();      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);      qtList.addQTInfo(qt);      first = newTemp;    }  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return newTemp;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String MultiplicativeExpression() :{/*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String first;  String middle;  String newTemp;  Token op = null;}{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/  first = UnaryExpression()  {    newTemp = first;  }  (    (      op = < MULTIPLY >    | op = < DIVIDE >    | op = < MOD >    )    middle = UnaryExpression()    {      newTemp = VariableNameGenerator.genVariableName();      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);      qtList.addQTInfo(qt);      first = newTemp;    }  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return newTemp;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String UnaryExpression() :{/*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String str = null;  Token t = null;}{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/  "(" str = Expression() ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return str;  }| t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {
    str = t.image;
    if (argList.checkUndefined(str))
    {
      String errorInfo = "";
      errorInfo += "Variable \"";
      errorInfo += t.image;
      errorInfo += "\" are not declared at line ";
      errorInfo += t.endLine;
      errorInfo += ", column ";
      errorInfo += t.endColumn;
      errorInfo += ".";
      errorList.addError(errorInfo);
    }    return str;  }| t = < INTEGER_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    str = t.image;    return str;  }| t = < FLOAT_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    str = t.image;    return str;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String Relation() :{/*@bgen(jjtree) Relation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t = null;}{/*@bgen(jjtree) Relation */
  try {
/*@egen*/  t = < RELATION >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
