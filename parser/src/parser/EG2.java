/* Generated By:JJTree&JavaCC: Do not edit this line. EG2.java */
package parser;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.io.IOException;
import util.*;

public class EG2/*@bgen(jjtree)*/implements EG2TreeConstants, EG2Constants {/*@bgen(jjtree)*/
  protected static JJTEG2State jjtree = new JJTEG2State();static QTList qtList = new QTList();
  static ArgList argList = new ArgList();
  static public ErrorList errorList = new ErrorList();
  static public String filePath = null;
  //static public EG2 parser = null;

  public static void run(EG2 parser)
  {
    //输出单词序列    try
    {
      Token token;
      token = token_source.getNextToken();
      FileOutputStream out = new FileOutputStream("Lexical.txt");
      PrintStream p = new PrintStream(out);
      int innerId = 0;
      while (token.image != "")
      {
                innerId++;
        p.println(innerId + ":\u005ct(" + token.image + ",\u005ct" + token.kind + "\u005ct)\u005cn");

        //System.out.println("<" + token.image + ",\t" + token.kind + ">");        token = token_source.getNextToken();
      }
    }
    catch (Exception e)
    {
      //System.out.println("Oops.");      //System.out.println(e.getMessage());
      errorList.addError(e.getMessage());
    }

    //输入流重置
    FileInputStream fileInput = null;
    try
    {
      fileInput = new FileInputStream(filePath);
    }
    catch (FileNotFoundException e1)
    {
      // TODO Auto-generated catch block
      //e1.printStackTrace();
      String errorInfo = "Error: File can not found.";
      errorList.addError(errorInfo);
    }
    parser.ReInit(fileInput);

    //输出语法树    try
    {
      SimpleNode n = EG2.Start();
      n.Init();
      n.dump("",n.p);
    }
    catch (Exception e)
    {
      //System.out.println("Oops.");      //System.out.println(e.getMessage());
      errorList.addError(e.getMessage());
    }

    //输出四元式
    qtList.Init();
    qtList.printQTTable();
    qtList.clear();

    //输出符号表
    argList.Init();
    argList.printArgTable();
        argList.clear();

    //输出错误列表
    errorList.Init();
    errorList.printError();
    errorList.clear();
  }

  static final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Program();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Program() throws ParseException {
 /*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(MAIN);
      jj_consume_token(LEFTPARENTHESES);
      jj_consume_token(RIGHTPARENTHESES);
      jj_consume_token(LEFTBRACES);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case FLOAT:
        case DOUBLE:
        case IF:
        case DO:
        case FOR:
        case WHILE:
        case SWITCH:
        case IDENTIFIER:
        case SEMICOLON:
        case LEFTBRACES:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        StatementBlock();
      }
      jj_consume_token(RIGHTBRACES);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void StatementBlock() throws ParseException {
 /*@bgen(jjtree) StatementBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case DOUBLE:
      case IF:
      case DO:
      case FOR:
      case WHILE:
      case SWITCH:
      case IDENTIFIER:
      case SEMICOLON:
        Statement();
        break;
      case LEFTBRACES:
        jj_consume_token(LEFTBRACES);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case FLOAT:
          case DOUBLE:
          case IF:
          case DO:
          case FOR:
          case WHILE:
          case SWITCH:
          case IDENTIFIER:
          case SEMICOLON:
          case LEFTBRACES:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          StatementBlock();
        }
        jj_consume_token(RIGHTBRACES);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Statement() throws ParseException {
 /*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case DOUBLE:
      case IDENTIFIER:
      case SEMICOLON:
        SeqStatement();
        break;
      case IF:
        ConStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case DO:
        DoWhileStatement();
        break;
      case SWITCH:
        SwitchCaseStatement();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SeqStatement() throws ParseException {
 /*@bgen(jjtree) SeqStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case DOUBLE:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case FLOAT:
        case DOUBLE:
          DeclareStatement();
          break;
        case IDENTIFIER:
          AssignStatement();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DeclareStatement() throws ParseException {
 /*@bgen(jjtree) DeclareStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  Token id;
  ArgInfo arg;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        t = jj_consume_token(INT);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id = jj_consume_token(IDENTIFIER);
    arg = new ArgInfo(t.image, id);
    if (argList.checkRepeat(arg))
    {
      String errorInfo = "";
      errorInfo += "Variable \u005c"";
      errorInfo += t.image;
      errorInfo += " ";
      errorInfo += id.image;
      errorInfo += "\u005c" declaration repeat at line ";
      errorInfo += id.endLine;
      errorInfo += ", column ";
      errorInfo += id.endColumn;
      errorInfo += ".";
      errorList.addError(errorInfo);
    }
    else
    {
      argList.addArgInfo(arg);
    }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        id = jj_consume_token(IDENTIFIER);
      arg = new ArgInfo(t.image, id);
      if (argList.checkRepeat(arg))
      {
        String errorInfo = "";
        errorInfo += "Variable \u005c"";
        errorInfo += t.image;
        errorInfo += " ";
        errorInfo += id.image;
        errorInfo += "\u005c" declaration repeat at line ";
        errorInfo += id.endLine;
        errorInfo += ", column ";
        errorInfo += id.endColumn;
        errorInfo += ".";
        errorList.addError(errorInfo);
        errorList.addError(errorInfo);
      }
      else
      {
        argList.addArgInfo(arg);
      }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AssignStatement() throws ParseException {
 /*@bgen(jjtree) AssignStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token id;
  Token a;
  String e;
    try {
      id = jj_consume_token(IDENTIFIER);
      a = jj_consume_token(EQUAL);
      e = Expression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (argList.checkUndefined(id.image))
    {
      String errorInfo = "";
      errorInfo += "Variable \u005c"";
      errorInfo += id.image;
      errorInfo += "\u005c" are not declared at line ";
      errorInfo += id.endLine;
      errorInfo += ", column ";
      errorInfo += id.endColumn;
      errorInfo += ".";
      errorList.addError(errorInfo);
    }
    else
    {
      QTInfo qt = new QTInfo(a.image, e, "_", id.image);
      qtList.addQTInfo(qt);
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ConStatement() throws ParseException {
 /*@bgen(jjtree) ConStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue chain = null;
  QTInfo info = null;
    try {
      jj_consume_token(IF);
      jj_consume_token(LEFTPARENTHESES);
      chain = Logical();
    chain.backpatchTrueChain(QTInfo.size + 1);
      jj_consume_token(RIGHTPARENTHESES);
      StatementBlock();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
      info = new QTInfo("J", "_", "_", "WAIT");
      qtList.addQTInfo(info);
      chain.backpatchFalseChain(QTInfo.size + 1);
        StatementBlock();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (info != null) info.setResult(QTInfo.size + 1);
    else chain.backpatchFalseChain(QTInfo.size + 1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue chain = null;
  int quad;
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LEFTPARENTHESES);
    quad = QTInfo.size + 1;
      chain = Logical();
    chain.backpatchTrueChain(QTInfo.size + 1);
      jj_consume_token(RIGHTPARENTHESES);
      StatementBlock();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad));
    chain.backpatchFalseChain(QTInfo.size + 1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue chain = null;
  int quad1;
  int quad2;
    try {
      jj_consume_token(FOR);
      jj_consume_token(LEFTPARENTHESES);
      AssignStatement();
      jj_consume_token(SEMICOLON);
    quad1 = QTInfo.size + 1;
      chain = Logical();
    quad2 = QTInfo.size + 1;
      jj_consume_token(SEMICOLON);
      AssignStatement();
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad1));
    chain.backpatchTrueChain(QTInfo.size + 1);
      jj_consume_token(RIGHTPARENTHESES);
      StatementBlock();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad2));
    chain.backpatchFalseChain(QTInfo.size + 1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DoWhileStatement() throws ParseException {
 /*@bgen(jjtree) DoWhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue chain = null;
  int quad;
    try {
      jj_consume_token(DO);
    quad = QTInfo.size + 1;
      StatementBlock();
      jj_consume_token(WHILE);
      jj_consume_token(LEFTPARENTHESES);
      chain = Logical();
    chain.backpatchTrueChain(quad);
    chain.backpatchFalseChain(QTInfo.size + 1);
      jj_consume_token(RIGHTPARENTHESES);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SwitchCaseStatement() throws ParseException {
 /*@bgen(jjtree) SwitchCaseStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHCASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String idStr;
  String caseStr;
  Token t = null;
  Token bk = null;
  Token mode = null;
  QTInfo info = null;
  QTInfo continueInfo = null;
  ConditionValue breakChain = new ConditionValue();
  int defaultQuad = 0;
  boolean hasDefault = false;
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LEFTPARENTHESES);
      idStr = Expression();
      jj_consume_token(RIGHTPARENTHESES);
      jj_consume_token(LEFTBRACES);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case DEFAULT1:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          mode = jj_consume_token(CASE);
          t = jj_consume_token(INTEGER_LITERAL);
          break;
        case DEFAULT1:
          mode = jj_consume_token(DEFAULT1);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      if (info != null) info.setResult(QTInfo.size + 1);
      if (mode.image == "case")
      {
        if (continueInfo != null)
        {
          continueInfo.setResult(QTInfo.size + 3);
          continueInfo = null;
        }
        caseStr = t.image;
        qtList.addQTInfo(new QTInfo("J==", idStr, caseStr, QTInfo.size + 3));
        info = new QTInfo("J", "_", "_", "WAIT");
        qtList.addQTInfo(info);
      }
      else if (mode.image == "default")
      {
        if (hasDefault)
        {
          //error:
          String errorInfo = "";
          errorInfo += "Multiple default labels in one switch at line ";
          errorInfo += mode.endLine;
          errorInfo += ", column ";
          errorInfo += mode.endColumn;
          errorInfo += ".";
          errorList.addError(errorInfo);
          {if (true) return;}
        }
        if (continueInfo != null)
        {
          continueInfo.setResult(QTInfo.size + 2);
          continueInfo = null;
        }
        hasDefault = true;
        //记录default的位置，最后一个case跳转
        defaultQuad = QTInfo.size + 2;
        info = new QTInfo("J", "_", "_", "WAIT");
        qtList.addQTInfo(info);
      }
        jj_consume_token(47);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case FLOAT:
          case DOUBLE:
          case IF:
          case DO:
          case FOR:
          case WHILE:
          case SWITCH:
          case IDENTIFIER:
          case SEMICOLON:
          case LEFTBRACES:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_5;
          }
          StatementBlock();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
          bk = jj_consume_token(BREAK);
          jj_consume_token(SEMICOLON);
        QTInfo breakInfo = new QTInfo("J", "_", "_", "BREAK");
        qtList.addQTInfo(breakInfo);
        breakChain.mergeTrue(breakInfo);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
      if (bk == null)
      {
        //语句末尾没有break则跳过case判断的两个四元式或default跳转的一个四元式
        continueInfo = new QTInfo("J", "_", "_", "CON");
        qtList.addQTInfo(continueInfo);
      }
      bk = null;
      }
      jj_consume_token(RIGHTBRACES);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (mode.image == "case" && !hasDefault) info.setResult(QTInfo.size);
    else if (mode.image == "case" && hasDefault) info.setResult(defaultQuad);
    else if (mode.image == "default")
    {
      //若default最后出现，则移除default处跳转四元式并将之后的序号前移
      qtList.remove(defaultQuad - 1);
      qtList.changeIndex(defaultQuad, 1);
      QTInfo.size--;
    }
    breakChain.backpatchTrueChain(QTInfo.size);
    //移除最后一个break或continueInfo的跳转四元式
    qtList.remove(QTInfo.size);
    QTInfo.size--;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public ConditionValue Logical() throws ParseException {
 /*@bgen(jjtree) Logical */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue chain1 = new ConditionValue();
  ConditionValue chain2 = new ConditionValue();
  Token log = null;
    try {
      chain1 = Condition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          log = jj_consume_token(AND);
        chain1.backpatchTrueChain(QTInfo.size + 1);
          break;
        case OR:
          log = jj_consume_token(OR);
        chain1.backpatchFalseChain(QTInfo.size + 1);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        chain2 = Logical();
      if (log.image == "&&")
      {
        chain2.mergeFalse(chain1);
      }
      else if (log.image == "||")
      {
        chain2.mergeTrue(chain1);
      }
      {if (true) return chain2;}
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return chain1;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ConditionValue Condition() throws ParseException {
 /*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String e1;
  String e2 = null;
  String rop = null;
  ConditionValue chain = new ConditionValue();
    try {
      e1 = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELATION:
        rop = Relation();
        e2 = Expression();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (rop != null)
    {
      QTInfo info = new QTInfo("J" + rop, e1, e2, "T");
      qtList.addQTInfo(info);
      chain.mergeTrue(info);
    }
    else
    {
      QTInfo info = new QTInfo("Jnz", e1, "_", "T");
      qtList.addQTInfo(info);
      chain.mergeTrue(info);
    }
    QTInfo info = new QTInfo("J", "_", "_", "F");
    qtList.addQTInfo(info);
    chain.mergeFalse(info);
    {if (true) return chain;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String str;
    try {
      str = AdditiveExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return str;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String first;
  String middle;
  String newTemp;
  Token op = null;
    try {
      first = MultiplicativeExpression();
    newTemp = first;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          op = jj_consume_token(PLUS);
          break;
        case MINUS:
          op = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        middle = MultiplicativeExpression();
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);
      qtList.addQTInfo(qt);
      first = newTemp;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return newTemp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String first;
  String middle;
  String newTemp;
  Token op = null;
    try {
      first = UnaryExpression();
    newTemp = first;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case MOD:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          op = jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          op = jj_consume_token(DIVIDE);
          break;
        case MOD:
          op = jj_consume_token(MOD);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        middle = UnaryExpression();
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);
      qtList.addQTInfo(qt);
      first = newTemp;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return newTemp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String UnaryExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String str = null;
  Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPARENTHESES:
        jj_consume_token(LEFTPARENTHESES);
        str = Expression();
        jj_consume_token(RIGHTPARENTHESES);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return str;}
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    str = t.image;
    if (argList.checkUndefined(str))
    {
      String errorInfo = "";
      errorInfo += "Variable \u005c"";
      errorInfo += t.image;
      errorInfo += "\u005c" are not declared at line ";
      errorInfo += t.endLine;
      errorInfo += ", column ";
      errorInfo += t.endColumn;
      errorInfo += ".";
      errorList.addError(errorInfo);
    }
    {if (true) return str;}
        break;
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    str = t.image;
    {if (true) return str;}
        break;
      case FLOAT_LITERAL:
        t = jj_consume_token(FLOAT_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    str = t.image;
    {if (true) return str;}
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Relation() throws ParseException {
 /*@bgen(jjtree) Relation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(RELATION);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EG2TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6000,0x87bc000,0x87bc000,0x87bc000,0x87bc000,0x801c000,0x801c000,0x1c000,0x0,0x40000,0x2800000,0x2800000,0x87bc000,0x1000000,0x0,0x0,0x0,0xc0000000,0xc0000000,0x0,0x0,0x8000880,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x280,0x280,0x280,0x80,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x280,0x0,0x60,0x60,0x10,0x0,0x0,0x7,0x7,0x2000,};
   }

  /** Constructor with InputStream. */
  public EG2(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG2(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public EG2(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public EG2(EG2TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EG2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
